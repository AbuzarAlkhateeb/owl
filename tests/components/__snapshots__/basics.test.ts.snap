// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basics can mount a component with just some text 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, owner, callSlot} = utils;
  
  return ctx => {
    const b1 = new BText(\`just text\`);
    return b1;
  }
}"
`;

exports[`basics can mount a simple component 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, owner, callSlot} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>simple vnode</span>\`);
  }
  
  return ctx => {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics can mount a simple component with multiple roots 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, owner, callSlot} = utils;
  
  class Block1 extends BStatic {
    static el = elem(\`<span/>\`);
  }
  
  class Block2 extends BStatic {
    static el = elem(\`<div/>\`);
  }
  
  return ctx => {
    const b1 = new BMulti(2);
    const b2 = b1.children[0] = new Block1();
    const b3 = b1.children[1] = new Block2();
    return b1;
  }
}"
`;

exports[`basics can mount a simple component with props 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, owner, callSlot} = utils;
  
  class Block1 extends BNode {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update() {
      this.el.firstChild.textContent = toString(this.data[0]);
    }
  }
  
  return ctx => {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].value;
    return b1;
  }
}"
`;

exports[`basics updating a component with t-foreach as root 1`] = `
"function anonymous(Blocks, utils
) {
  let {BCollection, BComponent, BComponentH, BHtml, BMulti, BNode, BStatic, BText} = Blocks;
  let {elem, toString, withDefault, call, zero, scope, owner, callSlot} = utils;
  
  return ctx => {
    const b1 = new BCollection(ctx['items']);
    b1.forEach(\`item\`, ctx, (i1, ctx) => {
      let key1 = ctx['item'];
      b1.children[i1] = new BText(ctx['item']);
      b1.keys[i1] = key1;
    });
    return b1;
  }
}"
`;
